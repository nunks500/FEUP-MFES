class MainTest is subclass of Test
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
		
operations
-- TODO Define operations here
public test() == (
		IO`print("testAddNews -> ");
		testAddNews();
		IO`println("Success");
		
		IO`print("testAddStartup -> ");
		testAddStartup();
		IO`println("Success");
     
     IO`print("testAddEvent -> ");
		testgetAttendees();
		IO`println("Success");
		
		IO`print("testAddSchedule -> ");
		testAddSchedule();
		IO`println("Success");
     
     IO`print("testgetConferencesAt -> ");
		testgetConferenceAt();
		IO`println("Success");
		
		IO`print("testgetTitle -> ");
		testgetTitle();
		IO`println("Success");
		
		IO`print("testgetEventbyTitle -> ");
		testgetTitle();
		IO`println("Success");
		
		IO`print("testcreateShowroom -> ");
		testaddShowroom();
		IO`println("Success");
		
		IO`print("testgetEventbyTitle -> ");
		testgetEventbyTitle();
		IO`println("Success");
		
		IO`print("testaddAttendee -> ");
		testaddAttendee();
		IO`println("Success");
		
			IO`print("testSchedules -> ");
		testschedule();
		IO`println("Success");
		
		IO`print("testgetTalks-> ");
		testgetTalks();
		IO`println("Success");
	
	
	
	);
	
	public testAddNews() == (
	-- Testa se consegue adicionar uma notícia
		dcl summit1: WebSummit := new WebSummit();
		dcl n2:News;
		dcl n1: News := new News("Inscriptions for WebSummit Open","Inscriptions are open from 20th February to 20th March",mk_Types`Date(21,12,2012));
		summit1.addNews(n1);
		n2 := summit1.getNewsByTitle("Inscriptions for WebSummit Open");
		assert(n1 in set summit1.getNews());
		assert(n1 = n2);
	
	);
	
	public testgetTalks() ==(
	
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl s3:Speaker := new Speaker("yuyuyu");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		 
	--	dcl c1:Conference := new Conference(mk_Types`Time(10,30,00),{s1,s2},{a1,a2},mk_Types`Date(21,5,2010));
		dcl c1:Conference := new Conference("Reneweable energies",{s1},{a1,a2});
		dcl c3:Conference := new Conference("Reneweable pol",{s1});
		dcl stage1:Stage := new Stage("Main Stage",100);
		dcl stage2:Stage := new Stage("Main Stage2",100);
		dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
		dcl schedule2:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage2,c3);
		dcl temp: set of Schedule;
		
		summit1.addSchedule(schedule1);
		
		temp := summit1.getTalksByName("Maria Laurinda");
		assert(schedule1 in set temp);
		
	
	);
	
	public testAddStartup() ==(
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:startup := new startup("OsCorp","USA");
		summit1.addStartup(s1);
	assert(s1 in set summit1.getStartups());
		
	);
	
	public testAddSchedule() ==(
	--Testa se consegue adicionar um evento ao horário geral de atividades
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl s3:Speaker := new Speaker("yuyuyu");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		 
	--	dcl c1:Conference := new Conference(mk_Types`Time(10,30,00),{s1,s2},{a1,a2},mk_Types`Date(21,5,2010));
		dcl c1:Conference := new Conference("Reneweable energies",{s1},{a1,a2});
		dcl c3:Conference := new Conference("Reneweable pol",{s1});
		dcl stage1:Stage := new Stage("Main Stage",100);
		dcl stage2:Stage := new Stage("Main Stage2",100);
		dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
		dcl schedule2:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage2,c3);
		dcl num:int := c1.getAttendees();
		
		summit1.addSchedule(schedule1);
		assert(schedule1 in set summit1.getSchedules());
	
		assert(2 = num);
	--	summit1.addSchedule(schedule2); -- Testa se não é possível ter 2 eventos com o mesmo orador em lugares
																		-- distintos. Tem de falhar.
		--IO`println(summit1.getSchedules());
		
		--summit1.addConference(c1);
		assert(schedule2 not in set summit1.getSchedules()); 
		
	
	);
	
		public testgetAttendees() ==(
		--Testa se consegue consegue obter o número de participantes corretamente
		
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		dcl num:int := c1.getAttendees();
		dcl t1:seq of char;
		t1 := c1.getTitle();
		
		assert(2 = num);

	);
	
	public testgetConferenceAt() ==(	
	
	--Devolve as conferências disponíveis a um determinado tempo
	
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		dcl stage1:Stage := new Stage("Main Stage",100);
		dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
		dcl schedules: set of Schedule;
		
		summit1.addSchedule(schedule1);
		
		
		schedules := summit1.getConferenceAt(mk_Types`Date(21,5,2010),mk_Types`Time(10,30,00));
		assert(schedule1 in set schedules);
	
	
	);
	
		public testgetTitle() ==(	
		--Testa se a função get funciona
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		dcl t1:seq of char;
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		t1 := c1.getTitle();
		assert(t1 = "Renewable energies");
	
	
	);
	
	public testgetEventbyTitle() ==(
	-- Testa se consegue obter uma conferência pelo título
	dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		dcl stage1:Stage := new Stage("Main Stage",100);
		dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
		dcl schedules: Schedule;
		
		summit1.addSchedule(schedule1);
		
		schedules := summit1.getConferenceWithTitle("Renewable energies");
		assert(schedules.getConference().getTitle() = "Renewable energies");
	
	
	);
	
	public testaddAttendee() ==(
	-- Adiciona um Participante a uma conferência
	-- Testa ainda se pode adicionar o mesmo participante a uma conferência a decorrer ao mesmo tempo
	-- noutro local
	
	dcl summit1: WebSummit := new WebSummit();
			dcl stage1:Stage := new Stage("Main Stage",100);
			dcl stage2:Stage := new Stage("Main Stage2",100);
			dcl a1:Attendee := new Attendee("Bill Gatorade");
			dcl c1:Conference := new Conference("Renewable energies",{},{});
			dcl c2:Conference := new Conference("Renewable gasolines",{},{});			
			dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
			dcl schedule2:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage2,c2);
		
		summit1.addSchedule(schedule1);
		summit1.addSchedule(schedule2);		
		summit1.addAttendeetoConference(a1,schedule1);
		summit1.addAttendeetoConference(a1,schedule2);

			
	
	);
	
	public testschedule() ==(
	-- Testa todos os testes na Schedule, até os para falhar daí não assuster por aparecerem 
	-- erros na consola
	
	dcl summit1: WebSummit := new WebSummit();
			dcl stage1:Stage := new Stage("Main Stage",100);
			dcl stage2:Stage := new Stage("Main Stage2",100);
			dcl a1:Attendee := new Attendee("Bill Gatorade");
			dcl s1:Speaker := new Speaker("Elon Musk");
			dcl c1:Conference := new Conference("Renewable energies",{},{a1});
			dcl c2:Conference := new Conference("Renewable gasolines",{},{a1});
			dcl c3:Conference := new Conference("Renewable energies",{s1},{});
			dcl c4:Conference := new Conference("Renewable gasolines",{s1},{});				
			dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
			dcl schedule2:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage2,c2);
			dcl schedule3:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c3);
			
			dcl schedule5:Schedule := new Schedule(mk_Types`Time(11,30,00),mk_Types`Date(21,5,2010),stage1,c3);
			dcl schedule4:Schedule := new Schedule(mk_Types`Time(11,30,00),mk_Types`Date(21,5,2010),stage2,c4);
		
		
		-- Tenta implementar várias opções erradas, para verificar que as condições estão bem
		
		summit1.addSchedule(schedule1);
		summit1.addSchedule(schedule2);
		summit1.addSchedule(schedule3);
		summit1.addSchedule(schedule5);
		summit1.addSchedule(schedule4);
		
		
				
	
	);
	
	public testaddShowroom() ==(
	dcl summit1: WebSummit := new WebSummit();
	dcl startup2:startup := new startup("Tesla","USA");
	
	dcl showroom1:Showroom := new Showroom(mk_Types`Date(20,5,2010),mk_Types`Date(21,5,2010));
	dcl list:set of startup;
	dcl tempstartup:startup;
	dcl tempstartup1:set of startup;
	
	showroom1.addStartupToShowroom(startup2);
	tempstartup:=showroom1.getStartupByName("Tesla");
	tempstartup1:=showroom1.getStartupByCountry("USA");
	assert(startup2 in set tempstartup1);
	
	assert(tempstartup = startup2);
	list := showroom1.getStartups();
	assert(startup2 in set list);
	summit1.addShowroom(showroom1);
	assert(summit1.getShowroomByDate(mk_Types`Date(20,5,2010)) = showroom1);
	
	);
functions
-- TODO Define functiones here
--
traces
-- TODO Define Combinatorial Test Traces here
end MainTest