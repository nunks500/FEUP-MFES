class Conference
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	 	private speakers: set of Speaker :={};
		private attendees: set of Attendee :={};
		private title: seq of char;
		
operations
-- TODO Define operations here
		public Conference:  seq of char*set of Speaker * set of Attendee ==> Conference
		Conference(n1,n2,n3) == (title := n1;speakers := n2; attendees := n3; return self)
		post title = n1 and speakers = n2 and attendees = n3;	
		
		public pure getLAttendees:() ==> set of Attendee
		getLAttendees() == return attendees;
		
		public getSpeakers:() ==> set of Speaker
		getSpeakers() == return speakers;
		 
		public pure getAttendees:() ==> int
		getAttendees() ==(
					dcl count: real := 0;
					
					for all attendee in set attendees
								do count := count + 1;
					
					return count;
		)
		post RESULT >= 0;
		
		
		public getTitle:() ==> seq of char
		getTitle() == return title;
		
		public addAttendee: Attendee ==> ()
		addAttendee(attendee) == (
	--	dcl numberofattendees:int := getAttendees;
		attendees := attendees union {attendee}
		)
		post attendee in set attendees;
		
	 
functions
-- TODO Define functiones here
		
traces
-- TODO Define Combinatorial Test Traces here
end Conference