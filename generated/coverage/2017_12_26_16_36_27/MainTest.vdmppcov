class MainTest is subclass of Test
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
		
operations
-- TODO Define operations here
public test() == (
		IO`print("testAddNews -> ");
		testAddNews();
		IO`println("Success");
		
		IO`print("testAddStartup -> ");
		testAddStartup();
		IO`println("Success");
     
     IO`print("testAddEvent -> ");
		testgetAttendees();
		IO`println("Success");
		
		IO`print("testgetAttendees -> ");
		testAddSchedule();
		IO`println("Success");
     
     IO`print("testgetConferencesAt -> ");
		testgetConferenceAt();
		IO`println("Success");
		
		IO`print("testgetTitle -> ");
		testgetTitle();
		IO`println("Success");
		
		IO`print("testgetEventbyTitle -> ");
		testgetTitle();
		IO`println("Success");
	
	
	);
	
	public testAddNews() == (
		dcl summit1: WebSummit := new WebSummit();
		dcl n1: News := new News("Inscriptions for WebSummit Open","Inscriptions are open from 20th February to 20th March",mk_Types`Date(21,12,2012));
		summit1.addNews(n1);
		assert(n1 in set summit1.getNews());
	
	);
	
	public testAddStartup() ==(
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:startup := new startup("OsCorp","USA");
		summit1.addStartup(s1);
		assert(s1 in set summit1.getStartups());
		
	);
	
	public testAddSchedule() ==(
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		 
	--	dcl c1:Conference := new Conference(mk_Types`Time(10,30,00),{s1,s2},{a1,a2},mk_Types`Date(21,5,2010));
		dcl c1:Conference := new Conference("Reneweable energies",{s1,s2},{a1,a2});
		dcl stage1:Stage := new Stage("Main Stage",100);
		dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
		dcl num:int := c1.getAttendees();
		
		summit1.addSchedule(schedule1);
		assert(schedule1 in set summit1.getSchedules());
	
		assert(2 = num);
		
	--	summit1.addConference(c1);
	--	assert(c1 in set summit1.getConferences()); 
		
	
	);
	
		public testgetAttendees() ==(
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		dcl num:int := c1.getAttendees();
	
		assert(2 = num);

	);
	
	public testgetConferenceAt() ==(	
		dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		dcl stage1:Stage := new Stage("Main Stage",100);
		dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
		dcl schedules: set of Schedule;
		
		summit1.addSchedule(schedule1);
		
		
		schedules := summit1.getConferenceAt(mk_Types`Date(21,5,2010),mk_Types`Time(10,30,00));
	
	
	);
	
		public testgetTitle() ==(	
		
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		dcl t1:seq of char;
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		t1 := c1.getTitle();
		assert(t1 = "Renewable energies");
	
	
	);
	
	public testgetEventbyTitle() ==(
	
	dcl summit1: WebSummit := new WebSummit();
		dcl s1:Speaker := new Speaker("Maria Laurinda");
		dcl s2:Speaker := new Speaker("Elon Musk");
		dcl a1:Attendee := new Attendee("Bill Gates");
		dcl a2:Attendee := new Attendee("Miguel");
		
		dcl c1:Conference := new Conference("Renewable energies",{s1,s2},{a1,a2});
		dcl stage1:Stage := new Stage("Main Stage",100);
		dcl schedule1:Schedule := new Schedule(mk_Types`Time(10,30,00),mk_Types`Date(21,5,2010),stage1,c1);
		dcl schedules: Schedule;
		
		summit1.addSchedule(schedule1);
		
		schedules := summit1.getConferenceWithTitle("Renewable energies");
		assert(schedules.getConference().getTitle() = "Renewable energies");
	
	
	);
functions
-- TODO Define functiones here
--
traces
-- TODO Define Combinatorial Test Traces here
end MainTest