class WebSummit
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
		private jornal: set of News :={};
		private startups: set of startup :={};
		private Schedules: set of Schedule :={};
		public static websumit: WebSummit := new WebSummit();
		
		
operations

public addNews: News ==> ()
addNews(news) == jornal := jornal union {news}
post news in set jornal;

public getNews: () ==> set of News
getNews() == return jornal;

public getStartups: () ==> set of startup
getStartups() == return startups;

public getSchedules:() ==> set of Schedule
getSchedules() == return Schedules;

public addStartup: startup ==> ()
addStartup(startup) == startups := startups union {startup}
post startup in set startups;

public addSchedule: Schedule ==> ()
addSchedule(schedule) == (
			dcl exist:int := 0;
			
		for all schedulez in set Schedules do(
				if (schedulez.getStage() = schedule.getStage() and schedulez.getDayOfStart() = schedule.getDayOfStart() and schedulez.getTimeOfStart() = schedule.getTimeOfStart())
				then 
				IO`print("Cannot have two events at the same stage on the same time");
				exist := 1;
				
		);
		
		for all schedulez in set Schedules do(
				for all name in set schedulez.getConference().getLAttendees() do
				(
						for all name2 in set schedule.getConference().getLAttendees() do
						(
						   if schedule.getDayOfStart() = schedulez.getDayOfStart() and schedule.getTimeOfStart() = schedulez.getTimeOfStart() and schedule.getConference().getTitle() <> schedulez.getConference().getTitle() and name2 = name
						   then IO`print("One Cannot Attend 2 events in the same time");
								exist := 1;
						   
						
						);
				);
		
		
		);
		
				for all schedulez in set Schedules do(
				for all name in set schedulez.getConference().getSpeakers() do
				(
						for all name2 in set schedule.getConference().getSpeakers() do
						(
						   if schedule.getDayOfStart() = schedulez.getDayOfStart() and schedule.getTimeOfStart() = schedulez.getTimeOfStart() and schedule.getConference().getTitle() <> schedulez.getConference().getTitle() and name2 = name
						   then IO`print("One Cannot Attend 2 events in the same time");
								exist := 1;
						   
						
						);
				);
		
		
		);
		if exist = 0 then 
		Schedules := Schedules union {schedule}

)	

post schedule in set Schedules;

public getConferenceAt: Types`Date * Types`Time ==> set of Schedule 
getConferenceAt(n1,n2) == (
							dcl events: set of Schedule :={};
							
					for all schedule in set Schedules do
						(
						if schedule.getDayOfStart() = n1 and schedule.getTimeOfStart() = n2
						then events := events union {schedule}						
							);
							
							return events;

);

public getConferenceWithTitle: seq of char ==> Schedule
getConferenceWithTitle(n1) == (
						dcl event: Schedule;
							
					for all schedule in set Schedules do
						(
						if schedule.getConference().getTitle() = n1
						then event := schedule						
							);
							
							return event;
);

public addAttendeetoConference: Attendee * Schedule ==> ()
addAttendeetoConference(n1,n2) ==(

				dcl exist:int := 0;
				
				for all schedulez in set Schedules do
				(
					if schedulez.getStage() <> n2.getStage() and schedulez.getDayOfStart() = n2.getDayOfStart() and schedulez.getTimeOfStart() = n2.getTimeOfStart() and n1 in set n2.getConference().getLAttendees()
				  then IO`print("Cannot add Attendee that already is signed up on another event");	
					exist := 1;
				
				);
				
				if exist = 0
				then n2.getConference().addAttendee(n1);
				

)
pre n1 not in set n2.getConference().getLAttendees(); -- To add a new Attendee to a Conference we need
																									-- to make sure he is not there already
	functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end WebSummit